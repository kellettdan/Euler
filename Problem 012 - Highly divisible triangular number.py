# Project Euler: Problem 12
# Highly divisible triangular number
# Uses: 

# Problem set-up
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

# Import the math package for square roots
import math

# Set up a function called p12
def p12(terms):
# Initialise trinum as the current triangular number, addv increments by 1 to get the next number
# Note that you only need to check up to the square root of the triangular number
    trinum=1
    addv=2
    sumdiv=0
    while (sumdiv<terms/2):
        trinum=trinum+addv
        addv=addv+1
        sumdiv=0
        for i in range(1,round(math.sqrt(trinum))+1):
            if(trinum % i ==0):
                sumdiv=sumdiv+1
        print(trinum,sumdiv)
    print(trinum)

p12(500)